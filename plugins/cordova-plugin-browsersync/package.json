{
  "_args": [
    [
      {
        "raw": "cordova-plugin-browsersync",
        "scope": null,
        "escapedName": "cordova-plugin-browsersync",
        "name": "cordova-plugin-browsersync",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Doran.KAYOUMI\\Documents\\_Projects\\Find-my-books\\node_modules"
    ]
  ],
  "_from": "cordova-plugin-browsersync@latest",
  "_id": "cordova-plugin-browsersync@0.1.6",
  "_inCache": true,
  "_location": "/cordova-plugin-browsersync",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/cordova-plugin-browsersync-0.1.6.tgz_1479749680310_0.644954101415351"
  },
  "_npmUser": {
    "name": "axemclion",
    "email": "code@nparashuram.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova-plugin-browsersync",
    "scope": null,
    "escapedName": "cordova-plugin-browsersync",
    "name": "cordova-plugin-browsersync",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-plugin-browsersync/-/cordova-plugin-browsersync-0.1.6.tgz",
  "_shasum": "8956e234e187d29347e71ff5d79266f3a63e1261",
  "_shrinkwrap": null,
  "_spec": "cordova-plugin-browsersync",
  "_where": "C:\\Users\\Doran.KAYOUMI\\Documents\\_Projects\\Find-my-books\\node_modules",
  "author": {
    "name": "Parashuram",
    "email": "code@nparashuram.com"
  },
  "bugs": {
    "url": "https://github.com/axemclion/cordova-plugin-browsersync/issues"
  },
  "cordova": {
    "id": "cordova-plugin-browsersync",
    "platforms": [
      "android",
      "ios"
    ]
  },
  "dependencies": {
    "browser-sync": "^2.12.3",
    "cheerio": "^0.19.0",
    "csp-parse": "0.0.2",
    "elementtree": "^0.1.6",
    "glob": "^5.0.15",
    "npm": "^2.13.5",
    "plist": "^1.1.0",
    "q": "^1.4.1"
  },
  "description": "Cordova Plugin to integrate browser-sync in the workflow",
  "devDependencies": {
    "browserify": "^11.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8956e234e187d29347e71ff5d79266f3a63e1261",
    "tarball": "https://registry.npmjs.org/cordova-plugin-browsersync/-/cordova-plugin-browsersync-0.1.6.tgz"
  },
  "gitHead": "caafe5c46df6650923415c43ba522667a3f2ebd3",
  "homepage": "https://github.com/axemclion/cordova-plugin-browsersync#readme",
  "id": "cordova-plugin-browsersync",
  "keywords": [
    "cordova",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "axemclion",
      "email": "code@nparashuram.com"
    }
  ],
  "name": "cordova-plugin-browsersync",
  "optionalDependencies": {},
  "readme": "# Cordova Browser-Sync Plugin\n\nIntegrating [BrowserSync](http://browsersync.io) into your Cordova workflow.\n\n- Watch files in the `www` folder and automatically reload HTML and CSS in all connected devices\n- Use BrowserSync's dashboard to control devices and reload them.\n- Synchronize scrolls, clicks and form inputs across multiple devices.\n- Supports real devices and emulators for iOS and Android platforms\n\n## Demo\nHere is a [blog post](http://blog.nparashuram.com/2015/08/using-browser-sync-with-cordova.html) explaining the plugin and its internals.\n\n[![Cordova Browser-Sync Plugin demo video](http://img.youtube.com/vi/XTXYhYS2m0c/0.jpg)](http://www.youtube.com/watch?v=XTXYhYS2m0c)\n\n## Usage\n\nThere are three ways to use the code in this plugin. Ensure that you have added the `ws:` and `unsafe-inline` CSP policies to your `default-src` section of the CSP meta tag (`<meta content=...>`) in index.html file.\n\n> Note that a `-- --live-reload` may need to be passed to `cordova run` command.\n\nThe presence of this `--live-reload` flag triggers the live reload workflow. Without this flag, the project remains unchanged. This way, the plugin does not have to be removed before packaging it for final deployment.\n\n### As a Cordova plugin (easiest)\nThis simplest way to integrate this in your Cordova workflow is to add it as a plugin\n\n```\ncordova plugin add cordova-plugin-browsersync\n```\n\nand then run run the cordova with `cordova run -- --live-reload`.\n\n### As a Cordova project hook\nClone this repo and run `npm run createHook` to get a `after_prepare.js`. Add this file as an `after_prepare` [hook](http://cordova.apache.org/docs/en/edge/guide_appdev_hooks_index.md.html) to your config.xml. For example:\n\n```\n<hook type=\"after_prepare\" src=\"scripts/after_prepare.js\" />\n```\n\n### Integrate into your workflow\nYou can also `require('cordova-plugin-browsersync')` in your node module and use the `changeHost` function and `browserSyncServer` directly in your existing workflow.\n\n## Options\n\n### Ignoring files\nIn many cases other hooks may copy over JS, CSS or image assets into folders like `www\\lib`, typically from locations like `bower_components`. These hooks may run at `after_prepare` and hence should be ignored in the live reload workflow. To achieve this, run the command as\n\n```\ncordova run -- --live-reload --ignore=lib/**/*.*\n```\n\nThe `--ignore` commands takes an [anymatch](https://github.com/es128/anymatch) compatible destination relative to the `www` folder.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/axemclion/cordova-plugin-browsersync.git"
  },
  "scripts": {
    "createHook": "browserify --node --no-bundle-external --standalone=cordova-bs-plugin -o after_prepare.js -e lib/projectHook.js"
  },
  "version": "0.1.6"
}
